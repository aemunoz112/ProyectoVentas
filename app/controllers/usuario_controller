from fastapi import HTTPException
from fastapi.encoders import jsonable_encoder
import mysql.connector
from app.config.database import get_db_connection

class UserController:

    def create_user(self, usuario):
        try:
            conn = get_db_connection()
            cursor = conn.cursor()

            query = """
            INSERT INTO usuarios (nombre, apellido, telefono, email, rol_id, password_hash, created_at, updated_at)
            VALUES (%s, %s, %s, %s, %s, %s, NOW(), NOW())
            """
            values = (
                usuario.nombre,
                usuario.apellido,
                usuario.telefono,
                usuario.email,
                usuario.rol_id,
                usuario.password_hash
            )

            cursor.execute(query, values)
            conn.commit()

            return {"mensaje": "Usuario creado exitosamente"}

        except mysql.connector.Error as err:
            print(f"Error al crear usuario: {err}")
            conn.rollback()
            raise HTTPException(status_code=500, detail="Error al crear usuario")

        finally:
            conn.close()

    def get_user(self, user_id: int):
        try:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM usuarios WHERE id = %s", (user_id,))
            result = cursor.fetchone()

            if not result:
                raise HTTPException(status_code=404, detail="Usuario no encontrado")

            content = {
                'id': int(result[0]),
                'nombre': result[1],
                'apellido': result[2],
                'telefono': result[3],
                'email': result[4],
                'rol_id': int(result[5]),
                'password_hash': result[6],
                'created_at': str(result[7]),
                'updated_at': str(result[8])
            }

            json_data = jsonable_encoder(content)
            return json_data

        except mysql.connector.Error as err:
            print(f"Error al obtener usuario: {err}")
            conn.rollback()
            raise HTTPException(status_code=500, detail="Error al obtener usuario")

        finally:
            conn.close()

    def get_users(self):
        try:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM usuarios")
            result = cursor.fetchall()

            payload = []
            content = {}

            for data in result:
                content = {
                    'id': data[0],
                    'nombre': data[1],
                    'apellido': data[2],
                    'telefono': data[3],
                    'email': data[4],
                    'rol_id': data[5],
                    'password_hash': data[6],
                    'created_at': str(data[7]),
                    'updated_at': str(data[8])
                }
                payload.append(content)
                content = {}

            json_data = jsonable_encoder(payload)

            if result:
                return {"resultado": json_data}
            else:
                raise HTTPException(status_code=404, detail="No se encontraron usuarios")

        except mysql.connector.Error as err:
            print(f"Error al obtener usuarios: {err}")
            conn.rollback()
            raise HTTPException(status_code=500, detail="Error al listar usuarios")

        finally:
            conn.close()


    def update_user(self, user_id: int, usuario):
        try:
            conn = get_db_connection()
            cursor = conn.cursor()

            cursor.execute("SELECT * FROM usuarios WHERE id = %s", (user_id,))
            result = cursor.fetchone()

            if not result:
                raise HTTPException(status_code=404, detail="Usuario no encontrado")

            query = """
            UPDATE usuarios
            SET nombre = %s,
                apellido = %s,
                telefono = %s,
                email = %s,
                rol_id = %s,
                password_hash = %s,
                updated_at = NOW()
            WHERE id = %s
            """
            values = (
                usuario.nombre,
                usuario.apellido,
                usuario.telefono,
                usuario.email,
                usuario.rol_id,
                usuario.password_hash,
                user_id
            )

            cursor.execute(query, values)
            conn.commit()

            return {"mensaje": f"Usuario con ID {user_id} actualizado correctamente"}

        except mysql.connector.Error as err:
            print(f"Error al actualizar usuario: {err}")
            conn.rollback()
            raise HTTPException(status_code=500, detail="Error al actualizar usuario")

        finally:
            conn.close()

    def delete_user(self, user_id: int):
        try:
            conn = get_db_connection()
            cursor = conn.cursor()

            cursor.execute("SELECT * FROM usuarios WHERE id = %s", (user_id,))
            result = cursor.fetchone()

            if not result:
                raise HTTPException(status_code=404, detail="Usuario no encontrado")

            cursor.execute("DELETE FROM usuarios WHERE id = %s", (user_id,))
            conn.commit()

            return {"mensaje": f"Usuario con ID {user_id} eliminado correctamente"}

        except mysql.connector.Error as err:
            print(f"Error al eliminar usuario: {err}")
            conn.rollback()
            raise HTTPException(status_code=500, detail="Error al eliminar usuario")

        finally:
            conn.close()
