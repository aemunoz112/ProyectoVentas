import mysql.connector
from fastapi import HTTPException
from models.producto_model import Producto
from config.database import get_db_connection
from fastapi.encoders import jsonable_encoder


class UserController:

    def create_producto(self, producto: Producto):
        try:
            conn= get_db_connection()
            cursor = conn.cursor()

            query = """
            INSERT INTO productos 
            (sku, nombre, tipo, dim_largo, dim_diametro, ancho, espesor, 
             peso_teorico_per_unit, unidad_medida, usos, stock)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            """

            values = (
                producto.sku,
                producto.nombre,
                producto.tipo,
                producto.dim_largo,
                producto.dim_diametro,
                producto.ancho,
                producto.espesor,
                producto.peso_teorico_per_unit,
                producto.unidad_medida,
                producto.usos,
                producto.stock
            )

            cursor.execute(query, values)
            conn.commit()

            return {"resultado": "Producto creado exitosamente"}

        except mysql.connector.Error as err:
            conn.rollback()
            raise HTTPException(status_code=500, detail=f"Error en la base de datos: {err}")
        finally:
            conn.close()

    def get_producto(self, producto_id: int):
        try:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM productos WHERE id = %s", (producto_id))
            result = cursor.fetchone()
            payload = []
            content = {}

            content = {
                'id': int(result[0]),
                'sku': result[1],
                'nombre': result[2],
                'tipo': result[3],
                'material': result[4],
                'dim_largo': float(result[5]) if result[5] else None,
                'dim_diametro': float(result[6]) if result[6] else None,
                'espesor': float(result[7]) if result[7] else None,
                'peso_teorico_per_unit': float(result[8]) if result[8] else None,
                'unidad_medida': result[9],
                'usos': result[10],
                'stock': int(result[11]) if result[11] else 0,
                'created_at': str(result[12]),
                'updated_at': str(result[13])
            }

            json_data = jsonable_encoder(content)
            return json_data

        except mysql.connector.Error as err:
            print(f"Error al obtener producto: {err}")
            conn.rollback()
            raise HTTPException(status_code=500, detail="Error al obtener producto de la base de datos")

        finally:
            conn.close()

    def get_productos(self):
        try:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM productos")
            result = cursor.fetchall()

            payload = []
            content = {}

            for data in result:
                content = {
                    'id': data[0],
                    'sku': data[1],
                    'nombre': data[2],
                    'tipo': data[3],
                    'material': data[4],
                    'dim_largo': float(data[5]) if data[5] else None,
                    'dim_diametro': float(data[6]) if data[6] else None,
                    'espesor': float(data[7]) if data[7] else None,
                    'peso_teorico_per_unit': float(data[8]) if data[8] else None,
                    'unidad_medida': data[9],
                    'usos': data[10],
                    'stock': int(data[11]) if data[11] else 0,
                    'created_at': str(data[12]),
                    'updated_at': str(data[13])
                }
                payload.append(content)
                content = {}

            json_data = jsonable_encoder(payload)

            if result:
                return {"resultado": json_data}
            else:
                raise HTTPException(status_code=404, detail="No se encontraron productos")

        except mysql.connector.Error as err:
            print(f"Error al obtener productos: {err}")
            conn.rollback()
            raise HTTPException(status_code=500, detail="Error al obtener productos de la base de datos")

        finally:
            conn.close()

    def delete_producto(self, producto_id: int):
        try:
            conn = get_db_connection()
            cursor = conn.cursor()

           
            cursor.execute("SELECT * FROM productos WHERE id = %s", (producto_id,))
            result = cursor.fetchone()

            if not result:
                raise HTTPException(status_code=404, detail="Producto no encontrado")

            cursor.execute("DELETE FROM productos WHERE id = %s", (producto_id,))
            conn.commit()  

            return {"mensaje": f"Producto con ID {producto_id} eliminado correctamente"}

        except mysql.connector.Error as err:
            print(f"Error al eliminar producto: {err}")
            conn.rollback()
            raise HTTPException(status_code=500, detail="Error al eliminar el producto")

        finally:
            conn.close()